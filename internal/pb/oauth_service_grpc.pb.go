// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: oauth_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Oauth_OauthGoogle_FullMethodName    = "/pb.Oauth/OauthGoogle"
	Oauth_OauthGithub_FullMethodName    = "/pb.Oauth/OauthGithub"
	Oauth_OauthMicrosoft_FullMethodName = "/pb.Oauth/OauthMicrosoft"
	Oauth_OauthDiscord_FullMethodName   = "/pb.Oauth/OauthDiscord"
)

// OauthClient is the client API for Oauth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthClient interface {
	OauthGoogle(ctx context.Context, in *OauthGoogleRequest, opts ...grpc.CallOption) (*OauthGoogleResponse, error)
	OauthGithub(ctx context.Context, in *OauthGithubRequest, opts ...grpc.CallOption) (*OauthGithubResponse, error)
	OauthMicrosoft(ctx context.Context, in *OauthMicrosoftRequest, opts ...grpc.CallOption) (*OauthMicrosoftResponse, error)
	OauthDiscord(ctx context.Context, in *OauthDiscordRequest, opts ...grpc.CallOption) (*OauthDiscordResponse, error)
}

type oauthClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthClient(cc grpc.ClientConnInterface) OauthClient {
	return &oauthClient{cc}
}

func (c *oauthClient) OauthGoogle(ctx context.Context, in *OauthGoogleRequest, opts ...grpc.CallOption) (*OauthGoogleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthGoogleResponse)
	err := c.cc.Invoke(ctx, Oauth_OauthGoogle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthClient) OauthGithub(ctx context.Context, in *OauthGithubRequest, opts ...grpc.CallOption) (*OauthGithubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthGithubResponse)
	err := c.cc.Invoke(ctx, Oauth_OauthGithub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthClient) OauthMicrosoft(ctx context.Context, in *OauthMicrosoftRequest, opts ...grpc.CallOption) (*OauthMicrosoftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthMicrosoftResponse)
	err := c.cc.Invoke(ctx, Oauth_OauthMicrosoft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthClient) OauthDiscord(ctx context.Context, in *OauthDiscordRequest, opts ...grpc.CallOption) (*OauthDiscordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OauthDiscordResponse)
	err := c.cc.Invoke(ctx, Oauth_OauthDiscord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthServer is the server API for Oauth service.
// All implementations must embed UnimplementedOauthServer
// for forward compatibility.
type OauthServer interface {
	OauthGoogle(context.Context, *OauthGoogleRequest) (*OauthGoogleResponse, error)
	OauthGithub(context.Context, *OauthGithubRequest) (*OauthGithubResponse, error)
	OauthMicrosoft(context.Context, *OauthMicrosoftRequest) (*OauthMicrosoftResponse, error)
	OauthDiscord(context.Context, *OauthDiscordRequest) (*OauthDiscordResponse, error)
	mustEmbedUnimplementedOauthServer()
}

// UnimplementedOauthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOauthServer struct{}

func (UnimplementedOauthServer) OauthGoogle(context.Context, *OauthGoogleRequest) (*OauthGoogleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthGoogle not implemented")
}
func (UnimplementedOauthServer) OauthGithub(context.Context, *OauthGithubRequest) (*OauthGithubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthGithub not implemented")
}
func (UnimplementedOauthServer) OauthMicrosoft(context.Context, *OauthMicrosoftRequest) (*OauthMicrosoftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthMicrosoft not implemented")
}
func (UnimplementedOauthServer) OauthDiscord(context.Context, *OauthDiscordRequest) (*OauthDiscordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthDiscord not implemented")
}
func (UnimplementedOauthServer) mustEmbedUnimplementedOauthServer() {}
func (UnimplementedOauthServer) testEmbeddedByValue()               {}

// UnsafeOauthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthServer will
// result in compilation errors.
type UnsafeOauthServer interface {
	mustEmbedUnimplementedOauthServer()
}

func RegisterOauthServer(s grpc.ServiceRegistrar, srv OauthServer) {
	// If the following call pancis, it indicates UnimplementedOauthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Oauth_ServiceDesc, srv)
}

func _Oauth_OauthGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthGoogleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).OauthGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oauth_OauthGoogle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).OauthGoogle(ctx, req.(*OauthGoogleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oauth_OauthGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).OauthGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oauth_OauthGithub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).OauthGithub(ctx, req.(*OauthGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oauth_OauthMicrosoft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthMicrosoftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).OauthMicrosoft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oauth_OauthMicrosoft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).OauthMicrosoft(ctx, req.(*OauthMicrosoftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oauth_OauthDiscord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthDiscordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).OauthDiscord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oauth_OauthDiscord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).OauthDiscord(ctx, req.(*OauthDiscordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Oauth_ServiceDesc is the grpc.ServiceDesc for Oauth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oauth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Oauth",
	HandlerType: (*OauthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OauthGoogle",
			Handler:    _Oauth_OauthGoogle_Handler,
		},
		{
			MethodName: "OauthGithub",
			Handler:    _Oauth_OauthGithub_Handler,
		},
		{
			MethodName: "OauthMicrosoft",
			Handler:    _Oauth_OauthMicrosoft_Handler,
		},
		{
			MethodName: "OauthDiscord",
			Handler:    _Oauth_OauthDiscord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth_service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: post_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Post_GetFollowedPosts_FullMethodName    = "/pb.Post/GetFollowedPosts"
	Post_CreatePost_FullMethodName          = "/pb.Post/CreatePost"
	Post_UpVotePost_FullMethodName          = "/pb.Post/UpVotePost"
	Post_DownVotePost_FullMethodName        = "/pb.Post/DownVotePost"
	Post_SavePost_FullMethodName            = "/pb.Post/SavePost"
	Post_UnSavePost_FullMethodName          = "/pb.Post/UnSavePost"
	Post_GetAllSavedPosts_FullMethodName    = "/pb.Post/GetAllSavedPosts"
	Post_CheckPostInteracted_FullMethodName = "/pb.Post/CheckPostInteracted"
	Post_AddPostComment_FullMethodName      = "/pb.Post/AddPostComment"
)

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	GetFollowedPosts(ctx context.Context, in *GetFollowedPostsRequest, opts ...grpc.CallOption) (*GetFollowedPostsResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	UpVotePost(ctx context.Context, in *UpVotePostRequest, opts ...grpc.CallOption) (*UpVotePostResponse, error)
	DownVotePost(ctx context.Context, in *DownVotePostRequest, opts ...grpc.CallOption) (*DownVotePostResponse, error)
	SavePost(ctx context.Context, in *SavePostRequest, opts ...grpc.CallOption) (*SavePostResponse, error)
	UnSavePost(ctx context.Context, in *UnSavePostRequest, opts ...grpc.CallOption) (*UnSavePostResponse, error)
	GetAllSavedPosts(ctx context.Context, in *GetAllSavedPostsRequest, opts ...grpc.CallOption) (*GetAllSavedPostsResponse, error)
	CheckPostInteracted(ctx context.Context, in *CheckPostInteractedRequest, opts ...grpc.CallOption) (*CheckPostInteractedResponse, error)
	AddPostComment(ctx context.Context, in *AddPostCommentRequest, opts ...grpc.CallOption) (*AddPostCommentResponse, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) GetFollowedPosts(ctx context.Context, in *GetFollowedPostsRequest, opts ...grpc.CallOption) (*GetFollowedPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowedPostsResponse)
	err := c.cc.Invoke(ctx, Post_GetFollowedPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, Post_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) UpVotePost(ctx context.Context, in *UpVotePostRequest, opts ...grpc.CallOption) (*UpVotePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpVotePostResponse)
	err := c.cc.Invoke(ctx, Post_UpVotePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DownVotePost(ctx context.Context, in *DownVotePostRequest, opts ...grpc.CallOption) (*DownVotePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownVotePostResponse)
	err := c.cc.Invoke(ctx, Post_DownVotePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) SavePost(ctx context.Context, in *SavePostRequest, opts ...grpc.CallOption) (*SavePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePostResponse)
	err := c.cc.Invoke(ctx, Post_SavePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) UnSavePost(ctx context.Context, in *UnSavePostRequest, opts ...grpc.CallOption) (*UnSavePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSavePostResponse)
	err := c.cc.Invoke(ctx, Post_UnSavePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetAllSavedPosts(ctx context.Context, in *GetAllSavedPostsRequest, opts ...grpc.CallOption) (*GetAllSavedPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSavedPostsResponse)
	err := c.cc.Invoke(ctx, Post_GetAllSavedPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) CheckPostInteracted(ctx context.Context, in *CheckPostInteractedRequest, opts ...grpc.CallOption) (*CheckPostInteractedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPostInteractedResponse)
	err := c.cc.Invoke(ctx, Post_CheckPostInteracted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) AddPostComment(ctx context.Context, in *AddPostCommentRequest, opts ...grpc.CallOption) (*AddPostCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPostCommentResponse)
	err := c.cc.Invoke(ctx, Post_AddPostComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility.
type PostServer interface {
	GetFollowedPosts(context.Context, *GetFollowedPostsRequest) (*GetFollowedPostsResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	UpVotePost(context.Context, *UpVotePostRequest) (*UpVotePostResponse, error)
	DownVotePost(context.Context, *DownVotePostRequest) (*DownVotePostResponse, error)
	SavePost(context.Context, *SavePostRequest) (*SavePostResponse, error)
	UnSavePost(context.Context, *UnSavePostRequest) (*UnSavePostResponse, error)
	GetAllSavedPosts(context.Context, *GetAllSavedPostsRequest) (*GetAllSavedPostsResponse, error)
	CheckPostInteracted(context.Context, *CheckPostInteractedRequest) (*CheckPostInteractedResponse, error)
	AddPostComment(context.Context, *AddPostCommentRequest) (*AddPostCommentResponse, error)
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServer struct{}

func (UnimplementedPostServer) GetFollowedPosts(context.Context, *GetFollowedPostsRequest) (*GetFollowedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedPosts not implemented")
}
func (UnimplementedPostServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServer) UpVotePost(context.Context, *UpVotePostRequest) (*UpVotePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVotePost not implemented")
}
func (UnimplementedPostServer) DownVotePost(context.Context, *DownVotePostRequest) (*DownVotePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownVotePost not implemented")
}
func (UnimplementedPostServer) SavePost(context.Context, *SavePostRequest) (*SavePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePost not implemented")
}
func (UnimplementedPostServer) UnSavePost(context.Context, *UnSavePostRequest) (*UnSavePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSavePost not implemented")
}
func (UnimplementedPostServer) GetAllSavedPosts(context.Context, *GetAllSavedPostsRequest) (*GetAllSavedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSavedPosts not implemented")
}
func (UnimplementedPostServer) CheckPostInteracted(context.Context, *CheckPostInteractedRequest) (*CheckPostInteractedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPostInteracted not implemented")
}
func (UnimplementedPostServer) AddPostComment(context.Context, *AddPostCommentRequest) (*AddPostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostComment not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}
func (UnimplementedPostServer) testEmbeddedByValue()              {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	// If the following call pancis, it indicates UnimplementedPostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_GetFollowedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetFollowedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetFollowedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetFollowedPosts(ctx, req.(*GetFollowedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_UpVotePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpVotePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).UpVotePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_UpVotePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).UpVotePost(ctx, req.(*UpVotePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DownVotePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownVotePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DownVotePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DownVotePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DownVotePost(ctx, req.(*DownVotePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_SavePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).SavePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_SavePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).SavePost(ctx, req.(*SavePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_UnSavePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSavePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).UnSavePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_UnSavePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).UnSavePost(ctx, req.(*UnSavePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetAllSavedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSavedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetAllSavedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetAllSavedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetAllSavedPosts(ctx, req.(*GetAllSavedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_CheckPostInteracted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPostInteractedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CheckPostInteracted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_CheckPostInteracted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CheckPostInteracted(ctx, req.(*CheckPostInteractedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_AddPostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).AddPostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_AddPostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).AddPostComment(ctx, req.(*AddPostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowedPosts",
			Handler:    _Post_GetFollowedPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Post_CreatePost_Handler,
		},
		{
			MethodName: "UpVotePost",
			Handler:    _Post_UpVotePost_Handler,
		},
		{
			MethodName: "DownVotePost",
			Handler:    _Post_DownVotePost_Handler,
		},
		{
			MethodName: "SavePost",
			Handler:    _Post_SavePost_Handler,
		},
		{
			MethodName: "UnSavePost",
			Handler:    _Post_UnSavePost_Handler,
		},
		{
			MethodName: "GetAllSavedPosts",
			Handler:    _Post_GetAllSavedPosts_Handler,
		},
		{
			MethodName: "CheckPostInteracted",
			Handler:    _Post_CheckPostInteracted_Handler,
		},
		{
			MethodName: "AddPostComment",
			Handler:    _Post_AddPostComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_service.proto",
}

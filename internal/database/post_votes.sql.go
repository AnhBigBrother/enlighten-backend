// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post_votes.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeVotePost = `-- name: ChangeVotePost :exec
UPDATE post_votes
SET
  voted = CASE
    WHEN voted = 'up'::VOTED THEN 'down'::VOTED
    ELSE 'up'::VOTED
  END
WHERE
  id = $1
`

func (q *Queries) ChangeVotePost(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, changeVotePost, id)
	return err
}

const createVotePost = `-- name: CreateVotePost :exec
INSERT INTO
  post_votes (
    "voter_id",
    "post_id",
    "id",
    "voted",
    "created_at"
  )
VALUES
  ($1, $2, $3, $4, $5)
`

type CreateVotePostParams struct {
	VoterID   pgtype.UUID      `json:"voter_id"`
	PostID    pgtype.UUID      `json:"post_id"`
	ID        pgtype.UUID      `json:"id"`
	Voted     Voted            `json:"voted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateVotePost(ctx context.Context, arg CreateVotePostParams) error {
	_, err := q.db.Exec(ctx, createVotePost,
		arg.VoterID,
		arg.PostID,
		arg.ID,
		arg.Voted,
		arg.CreatedAt,
	)
	return err
}

const decrePostDownVoted = `-- name: DecrePostDownVoted :exec
UPDATE posts
SET
  down_voted = down_voted - 1
WHERE
  id = $1
  AND down_voted > 0
`

func (q *Queries) DecrePostDownVoted(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, decrePostDownVoted, id)
	return err
}

const decrePostUpVoted = `-- name: DecrePostUpVoted :exec
UPDATE posts
SET
  up_voted = up_voted - 1
WHERE
  id = $1
  AND up_voted > 0
`

func (q *Queries) DecrePostUpVoted(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, decrePostUpVoted, id)
	return err
}

const deleteVotePost = `-- name: DeleteVotePost :exec
DELETE FROM post_votes
WHERE
  id = $1
`

func (q *Queries) DeleteVotePost(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteVotePost, id)
	return err
}

const findPostVote = `-- name: FindPostVote :one
SELECT
  id, voted, voter_id, post_id, created_at
FROM
  post_votes
WHERE
  voter_id = $1
  AND post_id = $2
`

type FindPostVoteParams struct {
	VoterID pgtype.UUID `json:"voter_id"`
	PostID  pgtype.UUID `json:"post_id"`
}

func (q *Queries) FindPostVote(ctx context.Context, arg FindPostVoteParams) (PostVote, error) {
	row := q.db.QueryRow(ctx, findPostVote, arg.VoterID, arg.PostID)
	var i PostVote
	err := row.Scan(
		&i.ID,
		&i.Voted,
		&i.VoterID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const increPostDownVoted = `-- name: IncrePostDownVoted :exec
UPDATE posts
SET
  down_voted = down_voted + 1
WHERE
  id = $1
`

func (q *Queries) IncrePostDownVoted(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, increPostDownVoted, id)
	return err
}

const increPostUpVoted = `-- name: IncrePostUpVoted :exec
UPDATE posts
SET
  up_voted = up_voted + 1
WHERE
  id = $1
`

func (q *Queries) IncrePostUpVoted(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, increPostUpVoted, id)
	return err
}

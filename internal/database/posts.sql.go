// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO
  posts (
    "id",
    "title",
    "content",
    "author_id",
    "created_at",
    "updated_at"
  )
VALUES
  ($1, $2, $3, $4, $5, $6)
RETURNING
  id, title, content, author_id, up_voted, down_voted, comments_count, created_at, updated_at
`

type CreatePostParams struct {
	ID        uuid.UUID
	Title     string
	Content   string
	AuthorID  uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.AuthorID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.UpVoted,
		&i.DownVoted,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHotPosts = `-- name: GetHotPosts :many
SELECT
  p.id, p.title, p.content, p.author_id, p.up_voted, p.down_voted, p.comments_count, p.created_at, p.updated_at,
  u.name AS author_name,
  u.email AS author_email,
  u.image AS author_image,
  p.up_voted + p.down_voted + p.comments_count AS total_interactions
FROM
  posts p
  LEFT JOIN users u ON p.author_id = u.id
ORDER BY
  total_interactions DESC
LIMIT
  $1
OFFSET
  $2
`

type GetHotPostsParams struct {
	Limit  int32
	Offset int32
}

type GetHotPostsRow struct {
	ID                uuid.UUID
	Title             string
	Content           string
	AuthorID          uuid.UUID
	UpVoted           int32
	DownVoted         int32
	CommentsCount     int32
	CreatedAt         time.Time
	UpdatedAt         time.Time
	AuthorName        sql.NullString
	AuthorEmail       sql.NullString
	AuthorImage       sql.NullString
	TotalInteractions int32
}

func (q *Queries) GetHotPosts(ctx context.Context, arg GetHotPostsParams) ([]GetHotPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getHotPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHotPostsRow
	for rows.Next() {
		var i GetHotPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.UpVoted,
			&i.DownVoted,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorName,
			&i.AuthorEmail,
			&i.AuthorImage,
			&i.TotalInteractions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewPosts = `-- name: GetNewPosts :many
SELECT
  p.id, p.title, p.content, p.author_id, p.up_voted, p.down_voted, p.comments_count, p.created_at, p.updated_at,
  u.name AS author_name,
  u.email AS author_email,
  u.image AS author_image
FROM
  posts p
  LEFT JOIN users u ON p.author_id = u.id
ORDER BY
  p.created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type GetNewPostsParams struct {
	Limit  int32
	Offset int32
}

type GetNewPostsRow struct {
	ID            uuid.UUID
	Title         string
	Content       string
	AuthorID      uuid.UUID
	UpVoted       int32
	DownVoted     int32
	CommentsCount int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	AuthorName    sql.NullString
	AuthorEmail   sql.NullString
	AuthorImage   sql.NullString
}

func (q *Queries) GetNewPosts(ctx context.Context, arg GetNewPostsParams) ([]GetNewPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getNewPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNewPostsRow
	for rows.Next() {
		var i GetNewPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.UpVoted,
			&i.DownVoted,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorName,
			&i.AuthorEmail,
			&i.AuthorImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByAuthor = `-- name: GetPostByAuthor :many
SELECT
  id, title, content, author_id, up_voted, down_voted, comments_count, created_at, updated_at
FROM
  posts
WHERE
  author_id = $1
`

func (q *Queries) GetPostByAuthor(ctx context.Context, authorID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.UpVoted,
			&i.DownVoted,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT
  p.id, p.title, p.content, p.author_id, p.up_voted, p.down_voted, p.comments_count, p.created_at, p.updated_at,
  u.name AS author_name,
  u.email AS author_email,
  u.image AS author_image
FROM
  (
    SELECT
      id, title, content, author_id, up_voted, down_voted, comments_count, created_at, updated_at
    FROM
      posts p1
    WHERE
      p1.id = $1
    LIMIT
      1
  ) p
  LEFT JOIN users u ON p.author_id = u.id
`

type GetPostByIdRow struct {
	ID            uuid.UUID
	Title         string
	Content       string
	AuthorID      uuid.UUID
	UpVoted       int32
	DownVoted     int32
	CommentsCount int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	AuthorName    sql.NullString
	AuthorEmail   sql.NullString
	AuthorImage   sql.NullString
}

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (GetPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.UpVoted,
		&i.DownVoted,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorName,
		&i.AuthorEmail,
		&i.AuthorImage,
	)
	return i, err
}

const getPostVotes = `-- name: GetPostVotes :one
SELECT
  id, voted, voter_id, post_id, created_at
FROM
  post_votes
WHERE
  post_id = $1
  AND voter_id = $2
LIMIT
  1
`

type GetPostVotesParams struct {
	PostID  uuid.UUID
	VoterID uuid.UUID
}

func (q *Queries) GetPostVotes(ctx context.Context, arg GetPostVotesParams) (PostVote, error) {
	row := q.db.QueryRowContext(ctx, getPostVotes, arg.PostID, arg.VoterID)
	var i PostVote
	err := row.Scan(
		&i.ID,
		&i.Voted,
		&i.VoterID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const getTopPosts = `-- name: GetTopPosts :many
SELECT
  p.id, p.title, p.content, p.author_id, p.up_voted, p.down_voted, p.comments_count, p.created_at, p.updated_at,
  u.name AS author_name,
  u.email AS author_email,
  u.image AS author_image
FROM
  posts p
  LEFT JOIN users u ON p.author_id = u.id
ORDER BY
  p.up_voted DESC,
  p.down_voted ASC
LIMIT
  $1
OFFSET
  $2
`

type GetTopPostsParams struct {
	Limit  int32
	Offset int32
}

type GetTopPostsRow struct {
	ID            uuid.UUID
	Title         string
	Content       string
	AuthorID      uuid.UUID
	UpVoted       int32
	DownVoted     int32
	CommentsCount int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	AuthorName    sql.NullString
	AuthorEmail   sql.NullString
	AuthorImage   sql.NullString
}

func (q *Queries) GetTopPosts(ctx context.Context, arg GetTopPostsParams) ([]GetTopPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopPostsRow
	for rows.Next() {
		var i GetTopPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.UpVoted,
			&i.DownVoted,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorName,
			&i.AuthorEmail,
			&i.AuthorImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increPostCommentCount = `-- name: IncrePostCommentCount :exec
UPDATE posts
SET
  comments_count = comments_count + 1
WHERE
  id = $1
`

func (q *Queries) IncrePostCommentCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, increPostCommentCount, id)
	return err
}

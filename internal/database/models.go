// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Voted string

const (
	VotedUp   Voted = "up"
	VotedDown Voted = "down"
)

func (e *Voted) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Voted(s)
	case string:
		*e = Voted(s)
	default:
		return fmt.Errorf("unsupported scan type for Voted: %T", src)
	}
	return nil
}

type NullVoted struct {
	Voted Voted `json:"voted"`
	Valid bool  `json:"valid"` // Valid is true if Voted is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVoted) Scan(value interface{}) error {
	if value == nil {
		ns.Voted, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Voted.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVoted) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Voted), nil
}

type Comment struct {
	ID              pgtype.UUID      `json:"id"`
	Comment         string           `json:"comment"`
	AuthorID        pgtype.UUID      `json:"author_id"`
	PostID          pgtype.UUID      `json:"post_id"`
	ParentCommentID pgtype.UUID      `json:"parent_comment_id"`
	UpVoted         int32            `json:"up_voted"`
	DownVoted       int32            `json:"down_voted"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
}

type CommentVote struct {
	ID        pgtype.UUID      `json:"id"`
	Voted     Voted            `json:"voted"`
	VoterID   pgtype.UUID      `json:"voter_id"`
	CommentID pgtype.UUID      `json:"comment_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type Post struct {
	ID            pgtype.UUID      `json:"id"`
	Title         string           `json:"title"`
	Content       string           `json:"content"`
	AuthorID      pgtype.UUID      `json:"author_id"`
	UpVoted       int32            `json:"up_voted"`
	DownVoted     int32            `json:"down_voted"`
	CommentsCount int32            `json:"comments_count"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

type PostVote struct {
	ID        pgtype.UUID      `json:"id"`
	Voted     Voted            `json:"voted"`
	VoterID   pgtype.UUID      `json:"voter_id"`
	PostID    pgtype.UUID      `json:"post_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type SavedPost struct {
	ID        pgtype.UUID      `json:"id"`
	UserID    pgtype.UUID      `json:"user_id"`
	PostID    pgtype.UUID      `json:"post_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID           pgtype.UUID      `json:"id"`
	Email        string           `json:"email"`
	Name         string           `json:"name"`
	Password     string           `json:"password"`
	Image        pgtype.Text      `json:"image"`
	RefreshToken pgtype.Text      `json:"refresh_token"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	Bio          pgtype.Text      `json:"bio"`
}

type UserFollow struct {
	ID         pgtype.UUID      `json:"id"`
	FollowerID pgtype.UUID      `json:"follower_id"`
	AuthorID   pgtype.UUID      `json:"author_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}
